{"version":3,"sources":["redux/contacts/contactAction.js","redux/contacts/contactReducer.js","redux/contacts/rootReducer.js","redux/store.js","redux/contacts/contactOperations.js","redux/contacts/contactsSelector.js","components/phoneForm/PhoneForm.js","components/Filter/Filter.js","components/singleContact/SingleContact.js","components/ContactList/ContactList.js","components/App/App.js","index.js"],"names":["getContactsRequest","createAction","getContactsSuccess","getContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","handleFilter","payload","target","value","items","createReducer","state","filter","contact","id","combineReducers","store","configureStore","reducer","contacts","rootReducer","devTools","process","axios","defaults","baseURL","itemsSelector","filterSelector","getFilteredContact","createSelector","name","toLowerCase","includes","getContactById","contactId","find","PhoneForm","formInitialState","number","alert","inputHandler","setState","submitHandler","e","preventDefault","props","toggleAlert","reset","addContact","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","dispatch","a","post","result","data","connect","ownProps","deleteContact","delete","TransitionGroup","component","map","key","App","animation","onGetContacts","appear","length","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c357b333.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const getContactsRequest = createAction('@contact/getRequest');\r\nexport const getContactsSuccess = createAction('@contact/getSuccess');\r\nexport const getContactsError = createAction('@contact/getError');\r\n\r\nexport const addContactRequest = createAction('@contact/addRequest');\r\nexport const addContactSuccess = createAction('@contact/addSuccess');\r\nexport const addContactError = createAction('@contact/addError');\r\n\r\nexport const deleteContactRequest = createAction('@contact/deleteRequest');\r\nexport const deleteContactSuccess = createAction('@contact/deleteSuccess');\r\nexport const deleteContactError = createAction('@contact/deleteError');\r\n\r\nexport const handleFilter = createAction('@contact/filter', ({ target }) => ({\r\n    payload: target.value,\r\n}));","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactSuccess,\r\n    getContactsSuccess,\r\n    deleteContactSuccess,\r\n    handleFilter,\r\n} from './contactAction';\r\n\r\nconst removeContact = (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload);\r\n\r\nexport const items = createReducer([], {\r\n    [getContactsSuccess]: (state, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: removeContact,\r\n});\r\nexport const filter = createReducer('', {\r\n    [handleFilter]: (state, { payload }) => (state = payload),\r\n});","import { combineReducers } from 'redux';\r\nimport { items, filter } from './contactReducer';\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n});","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from './contacts/rootReducer';\r\n\r\nconst store = configureStore({\r\n    reducer: { contacts: rootReducer },\r\n    devTools: process.env.NODE_ENV !== 'production'\r\n})\r\n\r\nexport default store\r\n\r\n// -----------------------------------\r\n\r\n// import { createStore } from \"redux\";\r\n// import { combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import contactsReducer from \"./reducers\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    getContactsRequest,\r\n    getContactsSuccess,\r\n    getContactsError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n} from './contactAction';\r\n\r\n// axios.defaults.baseURL = process.env.REACT_APP_FI REBASE_URL;\r\naxios.defaults.baseURL = 'http://localhost:2000';\r\n\r\nexport const getContacts = () => async dispatch => {\r\n    dispatch(getContactsRequest());\r\n    try {\r\n        const result = await axios.get('/contacts');\r\n        dispatch(getContactsSuccess(result.data));\r\n    } catch (error) {\r\n        dispatch(getContactsError(error));\r\n    }\r\n};\r\n\r\nexport const addContact = (name, number) => async dispatch => {\r\n    dispatch(addContactRequest());\r\n    try {\r\n        const result = await axios.post('/contacts', {\r\n            name,\r\n            number,\r\n        });\r\n        dispatch(addContactSuccess(result.data));\r\n    } catch (error) {\r\n        dispatch(addContactError(error));\r\n    }\r\n};\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n    dispatch(deleteContactRequest());\r\n    try {\r\n        await axios.delete(`/contacts/${id}`);\r\n        dispatch(deleteContactSuccess(id));\r\n    } catch (error) {\r\n        dispatch(deleteContactError(error));\r\n    }\r\n};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const itemsSelector = state => state.contacts.items;\r\nexport const filterSelector = state => state.contacts.filter;\r\n\r\n\r\nexport const getFilteredContact = createSelector(\r\n    [itemsSelector, filterSelector],\r\n    (items, filter) => {\r\n        return items.filter(contact =>\r\n            contact.name.toLowerCase().includes(filter.toLowerCase())\r\n        );\r\n    },\r\n);\r\n\r\nexport const getContactById = createSelector(\r\n    [itemsSelector, (state, contactId) => contactId],\r\n    (items, contactId) => items.find(contact => contact.id === contactId),\r\n);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact } from '../../redux/contacts/contactOperations';\r\nimport {\r\n    filterSelector,\r\n    itemsSelector,\r\n} from '../../redux/contacts/contactsSelector';\r\n\r\nimport './PhonePhorm.css';\r\n\r\n\r\nclass PhoneForm extends Component {\r\n    formInitialState = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n    state = {\r\n        ...this.formInitialState,\r\n        alert: false,\r\n    };\r\n\r\n    inputHandler = ({ target }) => {\r\n        const { value, name } = target;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    submitHandler = e => {\r\n        const { name, number, alert } = this.state;\r\n        e.preventDefault();\r\n\r\n        const { contacts } = this.props;\r\n        const isExists = contacts.find(contact => contact.name === name);\r\n\r\n        if (isExists) {\r\n            this.toggleAlert(alert);\r\n            return this.reset();\r\n        }\r\n\r\n        this.props.addContact(name, number);\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ ...this.formInitialState });\r\n    };\r\n\r\n    toggleAlert = status => {\r\n        this.setState({ alert: !status });\r\n    };\r\n\r\n    render() {\r\n        const { name, number, alert } = this.state;\r\n        const alertDelay = () => this.setState({ alert: !alert });\r\n\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={alert}\r\n                    classNames=\"alert\"\r\n                    timeout={1500}\r\n                    unmountOnExit\r\n                    onEntered={alertDelay}\r\n                >\r\n                    <button\r\n                        onClick={this.toggleAlert}\r\n                        className=\"alert\"\r\n                    >{`Contact already exists!`}</button>\r\n                </CSSTransition>\r\n                <form className=\"contacts_form\" onSubmit={this.submitHandler}>\r\n                    <label className=\"input_name\">\r\n                        Name\r\n            <br></br>\r\n                        <input\r\n                            className=\"input_form\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"Add name\"\r\n                            value={name}\r\n                            onChange={this.inputHandler}\r\n                        />\r\n                    </label>\r\n                    <br></br>\r\n                    <label className=\"input_name\">\r\n                        Number\r\n            <br></br>\r\n                        <input\r\n                            className=\"input_form\"\r\n                            type=\"text\"\r\n                            name=\"number\"\r\n                            placeholder=\"Add phone number\"\r\n                            value={number}\r\n                            onChange={this.inputHandler}\r\n                        />\r\n                    </label>\r\n                    <br></br>\r\n                    <button type=\"submit\" className=\"submitBtn\">\r\n                        Create contact\r\n          </button>\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: itemsSelector(state),\r\n    filter: filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneForm);\r\n\r\nPhoneForm.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            id: PropTypes.number,\r\n            number: PropTypes.string,\r\n        }),\r\n    ).isRequired,\r\n    filter: PropTypes.string.isRequired,\r\n    addContact: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { handleFilter } from '../../redux/contacts/contactAction';\r\nimport { filterSelector } from '../../redux/contacts/contactsSelector';\r\n\r\nimport './Filter.css';\r\n\r\nconst Filter = ({ filter, handleFilter }) => {\r\n    return (\r\n        <div className='filter_box'>\r\n            <label className='input_label'>\r\n                Find contact you need\r\n                 <br></br>\r\n                <input\r\n                    className='filter_form'\r\n                    type='text'\r\n                    name='filter'\r\n                    placeholder='Enter contact name'\r\n                    value={filter}\r\n                    onChange={handleFilter}\r\n                />\r\n            </label>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    filter: filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    handleFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            id: PropTypes.string,\r\n            number: PropTypes.string,\r\n        }).isRequired,\r\n    ),\r\n    filter: PropTypes.string.isRequired,\r\n    handleFilter: PropTypes.func.isRequired,\r\n};","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types'\r\nimport { deleteContact } from '../../redux/contacts/contactOperations';\r\nimport { getContactById } from '../../redux/contacts/contactsSelector';\r\nimport './SingleContact.css';\r\n\r\nconst SingleContact = ({ name, number, deleteContact }) => {\r\n    return (\r\n        <li className=\"contact\">\r\n            <h4>{name}</h4>\r\n            <p>{number}</p>\r\n            <button className=\"deleteButton\" type=\"button\" onClick={deleteContact}>\r\n                X\r\n            </button>\r\n        </li>\r\n    );\r\n};\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const contact = getContactById(state, ownProps.id);\r\n    return { ...contact };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    deleteContact: () => dispatch(deleteContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\r\n\r\nSingleContact.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    deleteContact: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport SingleContact from '../singleContact/SingleContact';\r\nimport { getFilteredContact } from '../../redux/contacts/contactsSelector';\r\n\r\nimport './ContactList.css';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n    return (\r\n        <TransitionGroup component='ul' className='contact_List'>\r\n            {contacts.map(({ id }) => (\r\n                <CSSTransition key={id} classNames='list_item' timeout={250}>\r\n                    <SingleContact id={id} />\r\n                </CSSTransition>\r\n            ))}\r\n        </TransitionGroup>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: getFilteredContact(state)\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps)(ContactList)\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            id: PropTypes.number,\r\n            number: PropTypes.string,\r\n        }),\r\n    ).isRequired,\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { getContacts } from '../../redux/contacts/contactOperations';\r\n// import { itemsSelector } from '../../redux/contacts/contactsSelector';\r\nimport PhoneForm from '../phoneForm/PhoneForm';\r\nimport Filter from '../Filter/Filter';\r\nimport ContactList from '../ContactList/ContactList';\r\n\r\n\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        animation: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.onGetContacts();\r\n        this.setState(state => ({\r\n            animation: !state.animation,\r\n        }));\r\n    }\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     const { contacts } = this.props;\r\n    //     if (prevProps.contacts !== contacts) {\r\n    //         localStorage.setItem('contacts', JSON.stringify(contacts));\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <CSSTransition\r\n                    in={true}\r\n                    appear={true}\r\n                    classNames=\"title-slideIn\"\r\n                    timeout={500}\r\n                    unmountOnExit\r\n                >\r\n                    <h1 className=\"app_title\">Phonebook</h1>\r\n                </CSSTransition>\r\n\r\n                <PhoneForm />\r\n\r\n                {this.props.contacts.length === 0 && (\r\n                    <>\r\n                        <h2 className=\"contact_title\">Contacts</h2>\r\n                        <p>Contacts list is empty. Please, create new cotnact!</p>\r\n                    </>\r\n                )}\r\n\r\n                <CSSTransition\r\n                    in={this.props.contacts.length > 1}\r\n                    classNames=\"filter_animation\"\r\n                    timeout={250}\r\n                    unmountOnExit\r\n                >\r\n                    <Filter />\r\n                </CSSTransition>\r\n\r\n                <ContactList />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts.items,\r\n});\r\nconst mapDispatchToProps = {\r\n    onGetContacts: getContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport \"./index.css\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider >,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}